/* @flow */

// ! Be sure that tasks expected to run on npm install (marked @dependent) have
// ! all required packages listed under "dependencies" instead of
// ! "devDependencies" in this project's package.json

import { readFile } from 'fs'
import { promisify } from 'util'
import gulp from 'gulp'
import tap from 'gulp-tap'
import del from 'del'
import log from 'fancy-log'
import parseGitIgnore from 'parse-gitignore'
import { transformFileSync as babel } from '@babel/core'

const paths = {};
const readFileAsync = promisify(readFile);

paths.flowTypedGitIgnore = 'flow-typed/.gitignore';
paths.configs = 'config';

paths.regenTargets = [
    `${paths.configs}/next.config.js`,
    `${paths.configs}/gulpfile.js`
];

const CLI_BANNER = `/**
 * !!! DO NOT EDIT THIS FILE DIRECTLY !!!
 * ! This file has been generated automatically. See the *.babel.js version of
 * ! this file to make permanent modifications (in config/)
 */

`;

const regenerate = () => {
    log(`Regenerating target configurations`);

    process.env.BABEL_ENV = 'generator';

    return gulp.src(paths.regenTargets)
        .pipe(tap(file => file.contents = Buffer.from(babel(`${CLI_BANNER}${file.contents.toString()}`))))
        .pipe(gulp.dest('.'));
};
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';
export { regenerate };

const cleanTypes = () => { // eslint-disable-line camelcase
    return (async () => {
        const targets = parseGitIgnore(await readFileAsync(paths.flowTypedGitIgnore));

        log(`Deletion schedule: ${targets.join('  ')}`);
        del(targets);
    })();
};

cleanTypes.description = 'Resets the flow-types/ directory to a pristine state';
gulp.task('clean-types', cleanTypes);
