/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the *.babel.js version of
* ! this file to make permanent modifications (in config/)
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanTypes = exports.regenerate = exports.eject = void 0;

require("source-map-support/register");

var _fs = require("fs");

var _util = require("util");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _del = _interopRequireDefault(require("del"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _core = require("@babel/core");

var _path = require("path");

var _inquirer = _interopRequireDefault(require("inquirer"));

var _replaceInFile = _interopRequireDefault(require("replace-in-file"));

var _shelljs = _interopRequireDefault(require("shelljs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const paths = {};
const FLOW_TYPES_DIR = 'flow-typed';
paths.flowTypedGitIgnore = `${FLOW_TYPES_DIR}/.gitignore`;
paths.configs = 'config';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';
paths.regenTargets = [`${paths.configs}/*.js`];
const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the *.babel.js version of
* ! this file to make permanent modifications (in config/)
*/\n\n`;
const readFileAsync = (0, _util.promisify)(_fs.readFile);

const cleanTypes = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.flowTypedGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${FLOW_TYPES_DIR}/: "${targets.join('" "')}"`);
  (0, _del.default)(targets, {
    cwd: FLOW_TYPES_DIR
  });
};

exports.cleanTypes = cleanTypes;
cleanTypes.description = `Resets the ${FLOW_TYPES_DIR} directory to a pristine state`;

const regenerate = () => {
  (0, _fancyLog.default)(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(paths.regenTargets).pipe((0, _gulpTap.default)(file => file.contents = Buffer.from(CLI_BANNER + (0, _core.transformSync)(file.contents.toString(), {
    sourceFileName: (0, _path.relative)(__dirname, file.path)
  }).code))).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';

const eject = () => _inquirer.default.prompt([{
  type: 'input',
  name: 'package.name',
  message: '[package.json] Specify name for this project (must be valid as a directory name)'
}, {
  type: 'input',
  name: 'package.desc',
  message: '[package.json] Very briefly describe this project'
}, {
  type: 'input',
  name: 'package.repo.url',
  message: '[package.json] Specify a git repository URL'
}, {
  type: 'input',
  name: 'debug.address',
  message: '[launch.json] Specify your dev/remote/server ip address (the one running node)',
  default: '192.168.115.5'
}, {
  type: 'input',
  name: 'debug.url',
  message: '[launch.json] Specify the URL entry point for your application',
  default: 'http://dev.local:80'
}, {
  type: 'input',
  name: 'debug.remoteRoot',
  message: "[launch.json] Specify an *absolute* path to this project's root on remote/server"
}, {
  type: 'confirm',
  name: 'installTypes',
  message: 'Do you want to install Flow types for all local packages?',
  default: true
}, {
  type: 'confirm',
  name: 'confirm',
  message: 'Does everything look good?',
  default: false
}]).then(async answers => {
  if (!answers.confirm) return _fancyLog.default.error('Task aborted!');

  try {
    _shelljs.default.mv(paths.envDist, paths.env);

    _shelljs.default.mv(paths.launchJsonDist, paths.launchJson);

    const delta1 = await (0, _replaceInFile.default)({
      files: paths.packageJson,
      from: [/("name": ?)".*?"/g, /("description": ?)".*?"/g, /("url": ?)".*?"/g],
      to: [`$1"${answers.package.name}"`, `$1"${answers.package.desc}"`, `$1"${answers.package.repo.url}"`]
    });
    const delta2 = await (0, _replaceInFile.default)({
      files: paths.launchJson,
      from: [/("address": ?)".*?"/g, /("remoteRoot": ?)".*?"/g, /("url": ?)".*?"/g],
      to: [`$1"${answers.debug.address}"`, `$1"${answers.debug.remoteRoot}"`, `$1"${answers.debug.url}"`]
    });
    const delta3 = await (0, _replaceInFile.default)({
      files: paths.gitIgnore,
      from: 'package-lock.json',
      to: ''
    });
    if (!delta1.length) throw new Error(`There was an error attempting to access "${paths.packageJson}"`);
    if (!delta2.length) throw new Error(`There was an error attempting to access "${paths.launchJson}"`);
    if (!delta3.length) throw new Error(`There was an error attempting to access "${paths.gitignore}"`);
    if (answers.installTypes) (0, _shelljs.default)('npm run install-types');

    _shelljs.default.rm('-f', paths.packageLockJson);

    _shelljs.default.echo("sh.rm('-f', '.git');");

    _shelljs.default.echo("sh('git init');");

    (0, _shelljs.default)(`cd .. && mv '${(0, _path.parse)(__dirname).name}' '${answers.package.name}'`);

    _fancyLog.default.info('Boilerplate ejection complete!');

    (0, _fancyLog.default)(`Next steps:\n\t- If you're going to host this project on Github/Gitlab, begin that process now\n\t- Check over package.json for accuracy; remove any unnecessary dependencies/devDependencies\n\t- Look over .env and configure it to your liking\n`);
  } catch (err) {
    _fancyLog.default.error(`ERROR: ${err.toString()}`);
  }
});

exports.eject = eject;
eject.description = 'Assists in configuring the boilerplate to be something useful';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9ndWxwZmlsZS5qcyJdLCJuYW1lcyI6WyJwYXRocyIsIkZMT1dfVFlQRVNfRElSIiwiZmxvd1R5cGVkR2l0SWdub3JlIiwiY29uZmlncyIsInBhY2thZ2VKc29uIiwibGF1bmNoSnNvbiIsImxhdW5jaEpzb25EaXN0IiwiZW52IiwiZW52RGlzdCIsImdpdFByb2plY3REaXIiLCJnaXRJZ25vcmUiLCJwYWNrYWdlTG9ja0pzb24iLCJyZWdlblRhcmdldHMiLCJDTElfQkFOTkVSIiwicmVhZEZpbGVBc3luYyIsInJlYWRGaWxlIiwiY2xlYW5UeXBlcyIsInRhcmdldHMiLCJqb2luIiwiY3dkIiwiZGVzY3JpcHRpb24iLCJyZWdlbmVyYXRlIiwicHJvY2VzcyIsIkJBQkVMX0VOViIsImd1bHAiLCJzcmMiLCJwaXBlIiwiZmlsZSIsImNvbnRlbnRzIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwic291cmNlRmlsZU5hbWUiLCJfX2Rpcm5hbWUiLCJwYXRoIiwiY29kZSIsImRlc3QiLCJlamVjdCIsInRlcm0iLCJwcm9tcHQiLCJ0eXBlIiwibmFtZSIsIm1lc3NhZ2UiLCJkZWZhdWx0IiwidGhlbiIsImFuc3dlcnMiLCJjb25maXJtIiwibG9nIiwiZXJyb3IiLCJzaCIsIm12IiwiZGVsdGExIiwiZmlsZXMiLCJ0byIsInBhY2thZ2UiLCJkZXNjIiwicmVwbyIsInVybCIsImRlbHRhMiIsImRlYnVnIiwiYWRkcmVzcyIsInJlbW90ZVJvb3QiLCJkZWx0YTMiLCJsZW5ndGgiLCJFcnJvciIsImdpdGlnbm9yZSIsImluc3RhbGxUeXBlcyIsInJtIiwiZWNobyIsImluZm8iLCJlcnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLEVBQWQ7QUFDQSxNQUFNQyxjQUFjLEdBQUcsWUFBdkI7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RUpqQixxQkFBR2tCLEVBQUgsQ0FBTSxJQUFOLEVBQVluRSxLQUFLLENBQUNXLGVBQWxCOztBQUVBc0MscUJBQUdtQixJQUFILENBQVEsc0JBQVI7O0FBRUFuQixxQkFBR21CLElBQUgsQ0FBUSxpQkFBUjs7QUFFQSwwQkFBSSxnQkFBZSxpQkFBVW5DLFNBQVYsRUFBcUJRLElBQUssTUFBS0ksT0FBTyxDQUFDUyxPQUFSLENBQWdCYixJQUFLLEdBQXZFOztBQUVBTSxzQkFBSXNCLElBQUosQ0FBUyxnQ0FBVDs7QUFDQSwyQkFBSyxxUEFBTDtBQUNILEdBNUNELENBOENBLE9BQU1DLEdBQU4sRUFBVztBQUNQdkIsc0JBQUlDLEtBQUosQ0FBVyxVQUFTc0IsR0FBRyxDQUFDdkMsUUFBSixFQUFlLEVBQW5DO0FBQ0g7QUFDSixDQWxHbUIsQ0FBcEI7OztBQW9HQU0sS0FBSyxDQUFDakIsV0FBTixHQUFvQiwrREFBcEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG4vLyA/IFRvIHJlZ2VuZXJhdGUgdGhpcyBmaWxlIChpLmUuIGlmIHlvdSBjaGFuZ2VkIGl0IGFuZCB3YW50IHlvdXIgY2hhbmdlcyB0b1xuLy8gPyBiZSBwZXJtYW5lbnQpLCBjYWxsIGBucG0gcnVuIHJlZ2VuZXJhdGVgIGFmdGVyd2FyZHNcblxuLy8gISBCZSBzdXJlIHRoYXQgdGFza3MgZXhwZWN0ZWQgdG8gcnVuIG9uIG5wbSBpbnN0YWxsIChtYXJrZWQgQGRlcGVuZGVudCkgaGF2ZVxuLy8gISBhbGwgcmVxdWlyZWQgcGFja2FnZXMgbGlzdGVkIHVuZGVyIFwiZGVwZW5kZW5jaWVzXCIgaW5zdGVhZCBvZlxuLy8gISBcImRldkRlcGVuZGVuY2llc1wiIGluIHRoaXMgcHJvamVjdCdzIHBhY2thZ2UuanNvblxuXG5pbXBvcnQgeyByZWFkRmlsZSB9IGZyb20gJ2ZzJ1xuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcbmltcG9ydCBndWxwIGZyb20gJ2d1bHAnXG5pbXBvcnQgdGFwIGZyb20gJ2d1bHAtdGFwJ1xuaW1wb3J0IGRlbCBmcm9tICdkZWwnXG5pbXBvcnQgbG9nIGZyb20gJ2ZhbmN5LWxvZydcbmltcG9ydCBwYXJzZUdpdElnbm9yZSBmcm9tICdwYXJzZS1naXRpZ25vcmUnXG5pbXBvcnQgeyB0cmFuc2Zvcm1TeW5jIGFzIGJhYmVsIH0gZnJvbSAnQGJhYmVsL2NvcmUnXG5pbXBvcnQgeyBwYXJzZSBhcyBwYXJzZVBhdGgsIHJlbGF0aXZlIGFzIHJlbFBhdGggfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHRlcm0gZnJvbSAnaW5xdWlyZXInXG5pbXBvcnQgcmVwbGFjZUluRmlsZSBmcm9tICdyZXBsYWNlLWluLWZpbGUnXG5pbXBvcnQgc2ggZnJvbSAnc2hlbGxqcydcblxuY29uc3QgcGF0aHMgPSB7fTtcbmNvbnN0IEZMT1dfVFlQRVNfRElSID0gJ2Zsb3ctdHlwZWQnO1xuXG5wYXRocy5mbG93VHlwZWRHaXRJZ25vcmUgPSBgJHtGTE9XX1RZUEVTX0RJUn0vLmdpdGlnbm9yZWA7XG5wYXRocy5jb25maWdzID0gJ2NvbmZpZyc7XG5wYXRocy5wYWNrYWdlSnNvbiA9ICdwYWNrYWdlLmpzb24nO1xucGF0aHMubGF1bmNoSnNvbiA9ICcudnNjb2RlL2xhdW5jaC5qc29uJztcbnBhdGhzLmxhdW5jaEpzb25EaXN0ID0gJy52c2NvZGUvbGF1bmNoLmRpc3QuanNvbic7XG5wYXRocy5lbnYgPSAnLmVudic7XG5wYXRocy5lbnZEaXN0ID0gJ2Rpc3QuZW52JztcbnBhdGhzLmdpdFByb2plY3REaXIgPSAnLmdpdCc7XG5wYXRocy5naXRJZ25vcmUgPSAnLmdpdGlnbm9yZSc7XG5wYXRocy5wYWNrYWdlTG9ja0pzb24gPSAncGFja2FnZS1sb2NrLmpzb24nO1xuXG5wYXRocy5yZWdlblRhcmdldHMgPSBbXG4gICAgYCR7cGF0aHMuY29uZmlnc30vKi5qc2Bcbl07XG5cbmNvbnN0IENMSV9CQU5ORVIgPSBgLyoqXG4qICEhISBETyBOT1QgRURJVCBUSElTIEZJTEUgRElSRUNUTFkgISEhXG4qICEgVGhpcyBmaWxlIGhhcyBiZWVuIGdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5LiBTZWUgdGhlICouYmFiZWwuanMgdmVyc2lvbiBvZlxuKiAhIHRoaXMgZmlsZSB0byBtYWtlIHBlcm1hbmVudCBtb2RpZmljYXRpb25zIChpbiBjb25maWcvKVxuKi9cXG5cXG5gO1xuXG5jb25zdCByZWFkRmlsZUFzeW5jID0gcHJvbWlzaWZ5KHJlYWRGaWxlKTtcblxuLy8gKiBDTEVBTlRZUEVTXG5cbmNvbnN0IGNsZWFuVHlwZXMgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IHBhcnNlR2l0SWdub3JlKGF3YWl0IHJlYWRGaWxlQXN5bmMocGF0aHMuZmxvd1R5cGVkR2l0SWdub3JlKSk7XG5cbiAgICBsb2coYERlbGV0aW9uIHRhcmdldHMgQCAke0ZMT1dfVFlQRVNfRElSfS86IFwiJHt0YXJnZXRzLmpvaW4oJ1wiIFwiJyl9XCJgKTtcbiAgICBkZWwodGFyZ2V0cywgeyBjd2Q6IEZMT1dfVFlQRVNfRElSIH0pO1xufTtcblxuY2xlYW5UeXBlcy5kZXNjcmlwdGlvbiA9IGBSZXNldHMgdGhlICR7RkxPV19UWVBFU19ESVJ9IGRpcmVjdG9yeSB0byBhIHByaXN0aW5lIHN0YXRlYDtcblxuLy8gKiBSRUdFTkVSQVRFXG5cbi8vID8gSWYgeW91IGNoYW5nZSB0aGlzIGZ1bmN0aW9uLCBydW4gYG5wbSBydW4gcmVnZW5lcmF0ZWAgdHdpY2U6IG9uY2UgdG9cbi8vID8gY29tcGlsZSB0aGlzIG5ldyBmdW5jdGlvbiBhbmQgb25jZSBhZ2FpbiB0byBjb21waWxlIGl0c2VsZiB3aXRoIHRoZSBuZXdseVxuLy8gPyBjb21waWxlZCBsb2dpYy4gSWYgdGhlcmUgaXMgYW4gZXJyb3IgdGhhdCBwcmV2ZW50cyByZWdlbmVyYXRpb24sIHlvdSBjYW5cbi8vID8gcnVuIGBucG0gcnVuIGdlbmVyYXRlYCB0aGVuIGBucG0gcnVuIHJlZ2VuZXJhdGVgIGluc3RlYWQuXG5jb25zdCByZWdlbmVyYXRlID0gKCkgPT4ge1xuICAgIGxvZyhgUmVnZW5lcmF0aW5nIHRhcmdldHM6IFwiJHtwYXRocy5yZWdlblRhcmdldHMuam9pbignXCIgXCInKX1cImApO1xuXG4gICAgcHJvY2Vzcy5lbnYuQkFCRUxfRU5WID0gJ2dlbmVyYXRvcic7XG5cbiAgICByZXR1cm4gZ3VscC5zcmMocGF0aHMucmVnZW5UYXJnZXRzKVxuICAgICAgICAgICAgICAgLnBpcGUodGFwKGZpbGUgPT4gZmlsZS5jb250ZW50cyA9IEJ1ZmZlci5mcm9tKENMSV9CQU5ORVIgKyBiYWJlbChmaWxlLmNvbnRlbnRzLnRvU3RyaW5nKCksIHtcbiAgICAgICAgICAgICAgICAgICBzb3VyY2VGaWxlTmFtZTogcmVsUGF0aChfX2Rpcm5hbWUsIGZpbGUucGF0aClcbiAgICAgICAgICAgICAgIH0pLmNvZGUpKSlcbiAgICAgICAgICAgICAgIC5waXBlKGd1bHAuZGVzdCgnLicpKTtcbn07XG5cbnJlZ2VuZXJhdGUuZGVzY3JpcHRpb24gPSAnSW52b2tlcyBiYWJlbCBvbiB0aGUgZmlsZXMgaW4gY29uZmlnLCB0cmFuc3BpbGluZyB0aGVtIGludG8gdGhlaXIgcHJvamVjdCByb290IHZlcnNpb25zJztcblxuLy8gKiBFSkVDVFxuXG5jb25zdCBlamVjdCA9ICgpID0+IHRlcm0ucHJvbXB0KFtcbiAgICB7XG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgIG5hbWU6ICdwYWNrYWdlLm5hbWUnLFxuICAgICAgICBtZXNzYWdlOiAnW3BhY2thZ2UuanNvbl0gU3BlY2lmeSBuYW1lIGZvciB0aGlzIHByb2plY3QgKG11c3QgYmUgdmFsaWQgYXMgYSBkaXJlY3RvcnkgbmFtZSknXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgIG5hbWU6ICdwYWNrYWdlLmRlc2MnLFxuICAgICAgICBtZXNzYWdlOiAnW3BhY2thZ2UuanNvbl0gVmVyeSBicmllZmx5IGRlc2NyaWJlIHRoaXMgcHJvamVjdCcsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgIG5hbWU6ICdwYWNrYWdlLnJlcG8udXJsJyxcbiAgICAgICAgbWVzc2FnZTogJ1twYWNrYWdlLmpzb25dIFNwZWNpZnkgYSBnaXQgcmVwb3NpdG9yeSBVUkwnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgIG5hbWU6ICdkZWJ1Zy5hZGRyZXNzJyxcbiAgICAgICAgbWVzc2FnZTogJ1tsYXVuY2guanNvbl0gU3BlY2lmeSB5b3VyIGRldi9yZW1vdGUvc2VydmVyIGlwIGFkZHJlc3MgKHRoZSBvbmUgcnVubmluZyBub2RlKScsXG4gICAgICAgIGRlZmF1bHQ6ICcxOTIuMTY4LjExNS41J1xuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICBuYW1lOiAnZGVidWcudXJsJyxcbiAgICAgICAgbWVzc2FnZTogJ1tsYXVuY2guanNvbl0gU3BlY2lmeSB0aGUgVVJMIGVudHJ5IHBvaW50IGZvciB5b3VyIGFwcGxpY2F0aW9uJyxcbiAgICAgICAgZGVmYXVsdDogJ2h0dHA6Ly9kZXYubG9jYWw6ODAnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdpbnB1dCcsXG4gICAgICAgIG5hbWU6ICdkZWJ1Zy5yZW1vdGVSb290JyxcbiAgICAgICAgbWVzc2FnZTogXCJbbGF1bmNoLmpzb25dIFNwZWNpZnkgYW4gKmFic29sdXRlKiBwYXRoIHRvIHRoaXMgcHJvamVjdCdzIHJvb3Qgb24gcmVtb3RlL3NlcnZlclwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICAgICAgbmFtZTogJ2luc3RhbGxUeXBlcycsXG4gICAgICAgIG1lc3NhZ2U6ICdEbyB5b3Ugd2FudCB0byBpbnN0YWxsIEZsb3cgdHlwZXMgZm9yIGFsbCBsb2NhbCBwYWNrYWdlcz8nLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6ICdjb25maXJtJyxcbiAgICAgICAgbmFtZTogJ2NvbmZpcm0nLFxuICAgICAgICBtZXNzYWdlOiAnRG9lcyBldmVyeXRoaW5nIGxvb2sgZ29vZD8nLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbl0pLnRoZW4oYXN5bmMgYW5zd2VycyA9PiB7XG4gICAgaWYoIWFuc3dlcnMuY29uZmlybSlcbiAgICAgICAgcmV0dXJuIGxvZy5lcnJvcignVGFzayBhYm9ydGVkIScpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgc2gubXYocGF0aHMuZW52RGlzdCwgcGF0aHMuZW52KTtcbiAgICAgICAgc2gubXYocGF0aHMubGF1bmNoSnNvbkRpc3QsIHBhdGhzLmxhdW5jaEpzb24pO1xuXG4gICAgICAgIGNvbnN0IGRlbHRhMSA9IGF3YWl0IHJlcGxhY2VJbkZpbGUoe1xuICAgICAgICAgICAgZmlsZXM6IHBhdGhzLnBhY2thZ2VKc29uLFxuICAgICAgICAgICAgZnJvbTogWy8oXCJuYW1lXCI6ID8pXCIuKj9cIi9nLCAvKFwiZGVzY3JpcHRpb25cIjogPylcIi4qP1wiL2csIC8oXCJ1cmxcIjogPylcIi4qP1wiL2ddLFxuICAgICAgICAgICAgdG86IFtgJDFcIiR7YW5zd2Vycy5wYWNrYWdlLm5hbWV9XCJgLCBgJDFcIiR7YW5zd2Vycy5wYWNrYWdlLmRlc2N9XCJgLCBgJDFcIiR7YW5zd2Vycy5wYWNrYWdlLnJlcG8udXJsfVwiYF0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGRlbHRhMiA9IGF3YWl0IHJlcGxhY2VJbkZpbGUoe1xuICAgICAgICAgICAgZmlsZXM6IHBhdGhzLmxhdW5jaEpzb24sXG4gICAgICAgICAgICBmcm9tOiBbLyhcImFkZHJlc3NcIjogPylcIi4qP1wiL2csIC8oXCJyZW1vdGVSb290XCI6ID8pXCIuKj9cIi9nLCAvKFwidXJsXCI6ID8pXCIuKj9cIi9nXSxcbiAgICAgICAgICAgIHRvOiBbYCQxXCIke2Fuc3dlcnMuZGVidWcuYWRkcmVzc31cImAsIGAkMVwiJHthbnN3ZXJzLmRlYnVnLnJlbW90ZVJvb3R9XCJgLCBgJDFcIiR7YW5zd2Vycy5kZWJ1Zy51cmx9XCJgXSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZGVsdGEzID0gYXdhaXQgcmVwbGFjZUluRmlsZSh7XG4gICAgICAgICAgICBmaWxlczogcGF0aHMuZ2l0SWdub3JlLFxuICAgICAgICAgICAgZnJvbTogJ3BhY2thZ2UtbG9jay5qc29uJyxcbiAgICAgICAgICAgIHRvOiAnJyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYoIWRlbHRhMS5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIHdhcyBhbiBlcnJvciBhdHRlbXB0aW5nIHRvIGFjY2VzcyBcIiR7cGF0aHMucGFja2FnZUpzb259XCJgKTtcblxuICAgICAgICBpZighZGVsdGEyLmxlbmd0aClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgd2FzIGFuIGVycm9yIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFwiJHtwYXRocy5sYXVuY2hKc29ufVwiYCk7XG5cbiAgICAgICAgaWYoIWRlbHRhMy5sZW5ndGgpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIHdhcyBhbiBlcnJvciBhdHRlbXB0aW5nIHRvIGFjY2VzcyBcIiR7cGF0aHMuZ2l0aWdub3JlfVwiYCk7XG5cbiAgICAgICAgaWYoYW5zd2Vycy5pbnN0YWxsVHlwZXMpXG4gICAgICAgICAgICBzaCgnbnBtIHJ1biBpbnN0YWxsLXR5cGVzJyk7XG5cbiAgICAgICAgc2gucm0oJy1mJywgcGF0aHMucGFja2FnZUxvY2tKc29uKTtcbiAgICAgICAgLy8gc2gucm0oJy1mJywgJy5naXQnKTtcbiAgICAgICAgc2guZWNobyhcInNoLnJtKCctZicsICcuZ2l0Jyk7XCIpO1xuICAgICAgICAvLyBzaCgnZ2l0IGluaXQnKTtcbiAgICAgICAgc2guZWNobyhcInNoKCdnaXQgaW5pdCcpO1wiKTtcblxuICAgICAgICBzaChgY2QgLi4gJiYgbXYgJyR7cGFyc2VQYXRoKF9fZGlybmFtZSkubmFtZX0nICcke2Fuc3dlcnMucGFja2FnZS5uYW1lfSdgKTtcblxuICAgICAgICBsb2cuaW5mbygnQm9pbGVycGxhdGUgZWplY3Rpb24gY29tcGxldGUhJyk7XG4gICAgICAgIGxvZyhgTmV4dCBzdGVwczpcXG5cXHQtIElmIHlvdSdyZSBnb2luZyB0byBob3N0IHRoaXMgcHJvamVjdCBvbiBHaXRodWIvR2l0bGFiLCBiZWdpbiB0aGF0IHByb2Nlc3Mgbm93XFxuXFx0LSBDaGVjayBvdmVyIHBhY2thZ2UuanNvbiBmb3IgYWNjdXJhY3k7IHJlbW92ZSBhbnkgdW5uZWNlc3NhcnkgZGVwZW5kZW5jaWVzL2RldkRlcGVuZGVuY2llc1xcblxcdC0gTG9vayBvdmVyIC5lbnYgYW5kIGNvbmZpZ3VyZSBpdCB0byB5b3VyIGxpa2luZ1xcbmApO1xuICAgIH1cblxuICAgIGNhdGNoKGVycikge1xuICAgICAgICBsb2cuZXJyb3IoYEVSUk9SOiAke2Vyci50b1N0cmluZygpfWApO1xuICAgIH1cbn0pO1xuXG5lamVjdC5kZXNjcmlwdGlvbiA9ICdBc3Npc3RzIGluIGNvbmZpZ3VyaW5nIHRoZSBib2lsZXJwbGF0ZSB0byBiZSBzb21ldGhpbmcgdXNlZnVsJztcblxuZXhwb3J0IHsgZWplY3QsIHJlZ2VuZXJhdGUsIGNsZWFuVHlwZXMgfTtcbiJdfQ==