/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanTypes = exports.regenerate = exports.eject = void 0;

require("source-map-support/register");

var _fs = require("fs");

var _util = require("util");

var _gulp = _interopRequireDefault(require("gulp"));

var _gulpTap = _interopRequireDefault(require("gulp-tap"));

var _del = _interopRequireDefault(require("del"));

var _fancyLog = _interopRequireDefault(require("fancy-log"));

var _parseGitignore = _interopRequireDefault(require("parse-gitignore"));

var _core = require("@babel/core");

var _path = require("path");

var _inquirer = _interopRequireDefault(require("inquirer"));

var _replaceInFile = _interopRequireDefault(require("replace-in-file"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _chalk = _interopRequireDefault(require("chalk"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  BUNDLE_ANALYZE
} = process.env;
if (typeof BUNDLE_ANALYZE !== 'string') throw new TypeError('BUNDLE_ANALYZE is improperly defined. Did you copy dist.env -> .env ?');
_shelljs.default.config.silent = true;
_shelljs.default.config.fatal = true;
const paths = {};
paths.flowTyped = 'flow-typed';
paths.flowTypedGitIgnore = `${paths.flowTyped}/.gitignore`;
paths.build = `build`;
paths.buildGitIgnore = `${paths.build}/.gitignore`;
paths.configs = 'config';
paths.packageJson = 'package.json';
paths.launchJson = '.vscode/launch.json';
paths.launchJsonDist = '.vscode/launch.dist.json';
paths.env = '.env';
paths.envDist = 'dist.env';
paths.gitProjectDir = '.git';
paths.gitIgnore = '.gitignore';
paths.packageLockJson = 'package-lock.json';
paths.regenTargets = [`${paths.configs}/*.js`];
const CLI_BANNER = `/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/\n\n`;
const readFileAsync = (0, _util.promisify)(_fs.readFile);

const cleanTypes = async () => {
  const targets = (0, _parseGitignore.default)((await readFileAsync(paths.flowTypedGitIgnore)));
  (0, _fancyLog.default)(`Deletion targets @ ${paths.flowTyped}/: "${targets.join('" "')}"`);
  (0, _del.default)(targets, {
    cwd: paths.flowTyped
  });
};

exports.cleanTypes = cleanTypes;
cleanTypes.description = `Resets the ${paths.flowTyped} directory to a pristine state`;

const regenerate = () => {
  (0, _fancyLog.default)(`Regenerating targets: "${paths.regenTargets.join('" "')}"`);
  process.env.BABEL_ENV = 'generator';
  return _gulp.default.src(paths.regenTargets).pipe((0, _gulpTap.default)(file => file.contents = Buffer.from(CLI_BANNER + (0, _core.transformSync)(file.contents.toString(), {
    sourceFileName: (0, _path.relative)(__dirname, file.path)
  }).code))).pipe(_gulp.default.dest('.'));
};

exports.regenerate = regenerate;
regenerate.description = 'Invokes babel on the files in config, transpiling them into their project root versions';

const eject = () => _inquirer.default.prompt([{
  type: 'input',
  name: 'package.name',
  message: '[package.json] Specify name for this project (must be valid as a directory name)'
}, {
  type: 'input',
  name: 'package.desc',
  message: '[package.json] Very briefly describe this project'
}, {
  type: 'input',
  name: 'package.repo.url',
  message: '[package.json] Specify a git repository URL'
}, {
  type: 'input',
  name: 'debug.address',
  message: '[launch.json] Specify your dev/remote/server ip address (the one running node)',
  default: '192.168.115.5'
}, {
  type: 'input',
  name: 'debug.url',
  message: '[launch.json] Specify the URL entry point for your application',
  default: 'http://dev.local:80'
}, {
  type: 'input',
  name: 'debug.remoteRoot',
  message: "[launch.json] Specify an *absolute* path to this project's root on remote/server"
}, {
  type: 'confirm',
  name: 'installTypes',
  message: 'Do you want to install Flow types for all local packages?',
  default: true
}, {
  type: 'confirm',
  name: 'confirm',
  message: 'Does everything look good?',
  default: false
}]).then(async answers => {
  if (!answers.confirm) return _fancyLog.default.error('Task aborted!');

  try {
    _fancyLog.default.info(`Moving ${paths.envDist} -> ${paths.env}`);

    _shelljs.default.mv(paths.envDist, paths.env);

    _fancyLog.default.info(`Moving ${paths.launchJsonDist} -> ${paths.launchJson}`);

    _shelljs.default.mv(paths.launchJsonDist, paths.launchJson);

    _fancyLog.default.info(`Mutating ${paths.packageJson}`);

    const delta1 = await (0, _replaceInFile.default)({
      files: paths.packageJson,
      from: [/("name": ?)".*?"/g, /("description": ?)".*?"/g, /("url": ?)".*?"/g],
      to: [`$1"${answers.package.name}"`, `$1"${answers.package.desc}"`, `$1"${answers.package.repo.url}"`]
    });

    _fancyLog.default.info(`Mutating ${paths.launchJson}`);

    const delta2 = await (0, _replaceInFile.default)({
      files: paths.launchJson,
      from: [/("address": ?)".*?"/g, /("remoteRoot": ?)".*?"/g, /("url": ?)".*?"/g],
      to: [`$1"${answers.debug.address}"`, `$1"${answers.debug.remoteRoot}"`, `$1"${answers.debug.url}"`]
    });

    _fancyLog.default.info(`Mutating ${paths.gitIgnore}`);

    const delta3 = await (0, _replaceInFile.default)({
      files: paths.gitIgnore,
      from: 'package-lock.json',
      to: ''
    });
    if (!delta1.length) throw new Error(`There was an error attempting to access "${paths.packageJson}"`);
    if (!delta2.length) throw new Error(`There was an error attempting to access "${paths.launchJson}"`);
    if (!delta3.length) throw new Error(`There was an error attempting to access "${paths.gitignore}"`);

    if (answers.installTypes) {
      _fancyLog.default.info(`Installing flow types (please be patient)`);

      _shelljs.default.exec('npm run install-types');
    }

    _fancyLog.default.info(`Removing ${paths.packageLockJson}`);

    _shelljs.default.rm('-f', paths.packageLockJson);

    _fancyLog.default.info('Removing boilerplate git repository');

    _shelljs.default.rm('-rf', '.git');

    _fancyLog.default.info('Initializing new git repository');

    _shelljs.default.exec('git init');

    _fancyLog.default.info(`Renaming project dir to ${answers.package.name}`);

    _shelljs.default.exec(`cd .. && mv '${(0, _path.parse)(__dirname).name}' '${answers.package.name}'`);

    _fancyLog.default.info(_chalk.default.green('Boilerplate ejection completed successfully!'));

    (0, _fancyLog.default)(`Next steps:
\t- If you're going to host this project on Github/Gitlab, begin that process now
\t- Check over ${paths.packageJson} for accuracy; remove any unnecessary dependencies/devDependencies and run scripts
\t- Check over ${paths.launchJson} if you plan on using launch configurations
\t- Look over ${paths.env} and configure it to your liking
\t- Consider removing ${paths.env} from ${paths.gitIgnore} if there're no secret values being passed
\t- Your Gulp file is at ./${paths.configs}/gulpfile.js ${_chalk.default.bold('and not the project root')}. Feel free to customize it!\n`);
  } catch (err) {
    _fancyLog.default.error(_chalk.default.red(`ERROR: ${err.toString()}`));
  }
});

exports.eject = eject;
eject.description = 'Assists in configuring the boilerplate to be something useful';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,