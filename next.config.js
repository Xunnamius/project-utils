/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _nextBundleAnalyzer = _interopRequireDefault(require("@zeit/next-bundle-analyzer"));

var _webpack = _interopRequireDefault(require("styled-jsx/webpack"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();

const {
  BUNDLE_ANALYZE
} = process.env;
if (typeof BUNDLE_ANALYZE !== 'string') throw new TypeError('BUNDLE_ANALYZE is improperly defined. Did you copy dist.env -> .env ?');
const paths = {
  universe: `${__dirname}/src/`,
  components: `${__dirname}/src/components/`
};

module.exports = (phase, {
  defaultConfig
}) => {
  return (0, _nextBundleAnalyzer.default)({
    distDir: 'build',
    analyzeServer: ['server', 'both'].includes(BUNDLE_ANALYZE),
    analyzeBrowser: ['browser', 'both'].includes(BUNDLE_ANALYZE),
    bundleAnalyzerConfig: {
      server: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-server.html'
      },
      browser: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-client.html'
      }
    },
    webpack: (config, {
      isServer,
      defaultLoaders
    }) => {
      config.module.rules.push({
        test: /\.css$/,
        use: [defaultLoaders.babel, {
          loader: _webpack.default.loader,
          options: {
            type: 'scoped'
          }
        }]
      });
      config.resolve.alias = Object.assign({}, config.resolve.alias, {
        universe$: paths.universe,
        components$: paths.components,
        universe: paths.universe,
        components: paths.components
      });
      return config;
    },
    serverRuntimeConfig: {},
    publicRuntimeConfig: {}
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiQlVORExFX0FOQUxZWkUiLCJwcm9jZXNzIiwiZW52IiwiVHlwZUVycm9yIiwicGF0aHMiLCJ1bml2ZXJzZSIsIl9fZGlybmFtZSIsImNvbXBvbmVudHMiLCJtb2R1bGUiLCJleHBvcnRzIiwicGhhc2UiLCJkZWZhdWx0Q29uZmlnIiwiZGlzdERpciIsImFuYWx5emVTZXJ2ZXIiLCJpbmNsdWRlcyIsImFuYWx5emVCcm93c2VyIiwiYnVuZGxlQW5hbHl6ZXJDb25maWciLCJzZXJ2ZXIiLCJhbmFseXplck1vZGUiLCJyZXBvcnRGaWxlbmFtZSIsImJyb3dzZXIiLCJ3ZWJwYWNrIiwiaXNTZXJ2ZXIiLCJkZWZhdWx0TG9hZGVycyIsInJ1bGVzIiwicHVzaCIsInRlc3QiLCJ1c2UiLCJiYWJlbCIsImxvYWRlciIsInN0eWxlZEpzeFdlYnBhY2siLCJvcHRpb25zIiwidHlwZSIsInJlc29sdmUiLCJhbGlhcyIsIk9iamVjdCIsImFzc2lnbiIsInVuaXZlcnNlJCIsImNvbXBvbmVudHMkIiwic2VydmVyUnVudGltZUNvbmZpZyIsInB1YmxpY1J1bnRpbWVDb25maWciXSwibWFwcGluZ3MiOiI7Ozs7QUFFQTs7QUFDQTs7OztBQUVBQSxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxNQUFsQjs7QUFFQSxNQUFNO0FBQ0ZDLEVBQUFBO0FBREUsSUFFRkMsT0FBTyxDQUFDQyxHQUZaO0FBSUEsSUFBRyxPQUFPRixjQUFQLEtBQTBCLFFBQTdCLEVBQ0ksTUFBTSxJQUFJRyxTQUFKLENBQWMsdUVBQWQsQ0FBTjtBQUVKLE1BQU1DLEtBQUssR0FBRztBQUNWQyxFQUFBQSxRQUFRLEVBQUcsR0FBRUMsU0FBVSxPQURiO0FBRVZDLEVBQUFBLFVBQVUsRUFBRyxHQUFFRCxTQUFVO0FBRmYsQ0FBZDs7QUFLQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLENBQUNDLEtBQUQsRUFBZ0I7QUFBRUMsRUFBQUE7QUFBRixDQUFoQixLQUE4QztBQUMzRCxTQUFPLGlDQUFtQjtBQUV0QkMsSUFBQUEsT0FBTyxFQUFFLE9BRmE7QUFJdEJDLElBQUFBLGFBQWEsRUFBRSxDQUFDLFFBQUQsRUFBVyxNQUFYLEVBQW1CQyxRQUFuQixDQUE0QmQsY0FBNUIsQ0FKTztBQUt0QmUsSUFBQUEsY0FBYyxFQUFFLENBQUMsU0FBRCxFQUFZLE1BQVosRUFBb0JELFFBQXBCLENBQTZCZCxjQUE3QixDQUxNO0FBTXRCZ0IsSUFBQUEsb0JBQW9CLEVBQUU7QUFDbEJDLE1BQUFBLE1BQU0sRUFBRTtBQUNKQyxRQUFBQSxZQUFZLEVBQUUsUUFEVjtBQUVKQyxRQUFBQSxjQUFjLEVBQUU7QUFGWixPQURVO0FBS2xCQyxNQUFBQSxPQUFPLEVBQUU7QUFDTEYsUUFBQUEsWUFBWSxFQUFFLFFBRFQ7QUFFTEMsUUFBQUEsY0FBYyxFQUFFO0FBRlg7QUFMUyxLQU5BO0FBb0J0QkUsSUFBQUEsT0FBTyxFQUFFLENBQUN0QixNQUFELEVBQWlCO0FBQUV1QixNQUFBQSxRQUFGO0FBQVlDLE1BQUFBO0FBQVosS0FBakIsS0FBMEQ7QUFDL0R4QixNQUFBQSxNQUFNLENBQUNTLE1BQVAsQ0FBY2dCLEtBQWQsQ0FBb0JDLElBQXBCLENBQXlCO0FBQ3JCQyxRQUFBQSxJQUFJLEVBQUUsUUFEZTtBQUVyQkMsUUFBQUEsR0FBRyxFQUFFLENBQ0RKLGNBQWMsQ0FBQ0ssS0FEZCxFQUVEO0FBQ0lDLFVBQUFBLE1BQU0sRUFBRUMsaUJBQWlCRCxNQUQ3QjtBQUVJRSxVQUFBQSxPQUFPLEVBQUU7QUFDTEMsWUFBQUEsSUFBSSxFQUFFO0FBREQ7QUFGYixTQUZDO0FBRmdCLE9BQXpCO0FBZ0JBakMsTUFBQUEsTUFBTSxDQUFDa0MsT0FBUCxDQUFlQyxLQUFmLEdBQXVCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCckMsTUFBTSxDQUFDa0MsT0FBUCxDQUFlQyxLQUFqQyxFQUF3QztBQUMzREcsUUFBQUEsU0FBUyxFQUFFakMsS0FBSyxDQUFDQyxRQUQwQztBQUUzRGlDLFFBQUFBLFdBQVcsRUFBRWxDLEtBQUssQ0FBQ0csVUFGd0M7QUFHM0RGLFFBQUFBLFFBQVEsRUFBRUQsS0FBSyxDQUFDQyxRQUgyQztBQUkzREUsUUFBQUEsVUFBVSxFQUFFSCxLQUFLLENBQUNHO0FBSnlDLE9BQXhDLENBQXZCO0FBT0EsYUFBT1IsTUFBUDtBQUNILEtBN0NxQjtBQWdEdEJ3QyxJQUFBQSxtQkFBbUIsRUFBRSxFQWhEQztBQXFEdEJDLElBQUFBLG1CQUFtQixFQUFFO0FBckRDLEdBQW5CLENBQVA7QUF5REgsQ0ExREQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgd2l0aEJ1bmRsZUFuYWx5emVyIGZyb20gJ0B6ZWl0L25leHQtYnVuZGxlLWFuYWx5emVyJ1xuaW1wb3J0IHN0eWxlZEpzeFdlYnBhY2sgZnJvbSAnc3R5bGVkLWpzeC93ZWJwYWNrJ1xuXG5yZXF1aXJlKCdkb3RlbnYnKS5jb25maWcoKTtcblxuY29uc3Qge1xuICAgIEJVTkRMRV9BTkFMWVpFXG59ID0gcHJvY2Vzcy5lbnY7XG5cbmlmKHR5cGVvZiBCVU5ETEVfQU5BTFlaRSAhPT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQlVORExFX0FOQUxZWkUgaXMgaW1wcm9wZXJseSBkZWZpbmVkLiBEaWQgeW91IGNvcHkgZGlzdC5lbnYgLT4gLmVudiA/Jyk7XG5cbmNvbnN0IHBhdGhzID0ge1xuICAgIHVuaXZlcnNlOiBgJHtfX2Rpcm5hbWV9L3NyYy9gLFxuICAgIGNvbXBvbmVudHM6IGAke19fZGlybmFtZX0vc3JjL2NvbXBvbmVudHMvYCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gKHBoYXNlOiBzdHJpbmcsIHsgZGVmYXVsdENvbmZpZyB9OiBPYmplY3QpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHJldHVybiB3aXRoQnVuZGxlQW5hbHl6ZXIoe1xuICAgICAgICAvLyA/IFJlbmFtZXMgdGhlIGJ1aWxkIGRpciBcImJ1aWxkXCIgaW5zdGVhZCBvZiBcIi5uZXh0XCJcbiAgICAgICAgZGlzdERpcjogJ2J1aWxkJyxcblxuICAgICAgICBhbmFseXplU2VydmVyOiBbJ3NlcnZlcicsICdib3RoJ10uaW5jbHVkZXMoQlVORExFX0FOQUxZWkUpLFxuICAgICAgICBhbmFseXplQnJvd3NlcjogWydicm93c2VyJywgJ2JvdGgnXS5pbmNsdWRlcyhCVU5ETEVfQU5BTFlaRSksXG4gICAgICAgIGJ1bmRsZUFuYWx5emVyQ29uZmlnOiB7XG4gICAgICAgICAgICBzZXJ2ZXI6IHtcbiAgICAgICAgICAgICAgICBhbmFseXplck1vZGU6ICdzdGF0aWMnLFxuICAgICAgICAgICAgICAgIHJlcG9ydEZpbGVuYW1lOiAnYnVuZGxlLWFuYWx5c2lzLXNlcnZlci5odG1sJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyb3dzZXI6IHtcbiAgICAgICAgICAgICAgICBhbmFseXplck1vZGU6ICdzdGF0aWMnLFxuICAgICAgICAgICAgICAgIHJlcG9ydEZpbGVuYW1lOiAnYnVuZGxlLWFuYWx5c2lzLWNsaWVudC5odG1sJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8vID8gV2VicGFjayBjb25maWd1cmF0aW9uXG4gICAgICAgIC8vICEgTm90ZSB0aGF0IHRoZSB3ZWJwYWNrIGNvbmZpZ3VyYXRpb24gaXMgZXhlY3V0ZWQgdHdpY2U6IG9uY2VcbiAgICAgICAgLy8gISBzZXJ2ZXItc2lkZSBhbmQgb25jZSBjbGllbnQtc2lkZSFcbiAgICAgICAgd2VicGFjazogKGNvbmZpZzogT2JqZWN0LCB7IGlzU2VydmVyLCBkZWZhdWx0TG9hZGVycyB9OiBPYmplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbmZpZy5tb2R1bGUucnVsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGVzdDogL1xcLmNzcyQvLFxuICAgICAgICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TG9hZGVycy5iYWJlbCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyOiBzdHlsZWRKc3hXZWJwYWNrLmxvYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2NvcGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vID8gVGhlc2UgYXJlIGFsaWFzZXMgdGhhdCBjYW4gYmUgdXNlZCBkdXJpbmcgSlMgaW1wb3J0IGNhbGxzXG4gICAgICAgICAgICAvLyAhIE5vdGUgdGhhdCB5b3UgbXVzdCBhbHNvIGNoYW5nZSB0aGVzZSBzYW1lIGFsaWFzZXMgaW4gLmZsb3djb25maWdcbiAgICAgICAgICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiBwYWNrYWdlLmpzb24gKGplc3QpXG4gICAgICAgICAgICBjb25maWcucmVzb2x2ZS5hbGlhcyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZy5yZXNvbHZlLmFsaWFzLCB7XG4gICAgICAgICAgICAgICAgdW5pdmVyc2UkOiBwYXRocy51bml2ZXJzZSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzJDogcGF0aHMuY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICB1bml2ZXJzZTogcGF0aHMudW5pdmVyc2UsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogcGF0aHMuY29tcG9uZW50c1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gPyBXaWxsIG9ubHkgYmUgYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIgc2lkZVxuICAgICAgICBzZXJ2ZXJSdW50aW1lQ29uZmlnOiB7XG4gICAgICAgICAgICAvLyAuLi5cbiAgICAgICAgfSxcblxuICAgICAgICAvLyA/IFdpbGwgYmUgYXZhaWxhYmxlIG9uIGJvdGggc2VydmVyIGFuZCBjbGllbnRcbiAgICAgICAgcHVibGljUnVudGltZUNvbmZpZzoge1xuICAgICAgICAgICAgLy8gLi4uXG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4iXX0=