/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _nextBundleAnalyzer = _interopRequireDefault(require("@zeit/next-bundle-analyzer"));

var _webpack = _interopRequireDefault(require("styled-jsx/webpack"));

var _devUtils = require("./src/dev-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _devUtils.populateEnv)();
const {
  BUNDLE_ANALYZE
} = process.env;
const paths = {
  universe: `${__dirname}/src/`,
  components: `${__dirname}/src/components/`
};

module.exports = () => {
  return (0, _nextBundleAnalyzer.default)({
    distDir: 'build',
    analyzeServer: ['server', 'both'].includes(BUNDLE_ANALYZE),
    analyzeBrowser: ['browser', 'both'].includes(BUNDLE_ANALYZE),
    bundleAnalyzerConfig: {
      server: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-server.html'
      },
      browser: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-client.html'
      }
    },
    webpack: (config, {
      defaultLoaders
    }) => {
      config.module.rules.push({
        test: /\.css$/,
        use: [defaultLoaders.babel, {
          loader: _webpack.default.loader,
          options: {
            type: 'scoped'
          }
        }]
      });
      config.resolve.alias = Object.assign({}, config.resolve.alias, {
        universe$: paths.universe,
        components$: paths.components,
        universe: paths.universe,
        components: paths.components
      });
      return config;
    },
    serverRuntimeConfig: {},
    publicRuntimeConfig: {}
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJCVU5ETEVfQU5BTFlaRSIsInByb2Nlc3MiLCJlbnYiLCJwYXRocyIsInVuaXZlcnNlIiwiX19kaXJuYW1lIiwiY29tcG9uZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJkaXN0RGlyIiwiYW5hbHl6ZVNlcnZlciIsImluY2x1ZGVzIiwiYW5hbHl6ZUJyb3dzZXIiLCJidW5kbGVBbmFseXplckNvbmZpZyIsInNlcnZlciIsImFuYWx5emVyTW9kZSIsInJlcG9ydEZpbGVuYW1lIiwiYnJvd3NlciIsIndlYnBhY2siLCJjb25maWciLCJkZWZhdWx0TG9hZGVycyIsInJ1bGVzIiwicHVzaCIsInRlc3QiLCJ1c2UiLCJiYWJlbCIsImxvYWRlciIsInN0eWxlZEpzeFdlYnBhY2siLCJvcHRpb25zIiwidHlwZSIsInJlc29sdmUiLCJhbGlhcyIsIk9iamVjdCIsImFzc2lnbiIsInVuaXZlcnNlJCIsImNvbXBvbmVudHMkIiwic2VydmVyUnVudGltZUNvbmZpZyIsInB1YmxpY1J1bnRpbWVDb25maWciXSwibWFwcGluZ3MiOiI7Ozs7QUFFQTs7QUFDQTs7QUFFQTs7OztBQUVBO0FBRUEsTUFBTTtBQUNGQSxFQUFBQTtBQURFLElBRUZDLE9BQU8sQ0FBQ0MsR0FGWjtBQUlBLE1BQU1DLEtBQUssR0FBRztBQUNWQyxFQUFBQSxRQUFRLEVBQUcsR0FBRUMsU0FBVSxPQURiO0FBRVZDLEVBQUFBLFVBQVUsRUFBRyxHQUFFRCxTQUFVO0FBRmYsQ0FBZDs7QUFLQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE1BQW9EO0FBQ2pFLFNBQU8saUNBQW1CO0FBRXRCQyxJQUFBQSxPQUFPLEVBQUUsT0FGYTtBQUt0QkMsSUFBQUEsYUFBYSxFQUFFLENBQUMsUUFBRCxFQUFXLE1BQVgsRUFBbUJDLFFBQW5CLENBQTRCWCxjQUE1QixDQUxPO0FBTXRCWSxJQUFBQSxjQUFjLEVBQUUsQ0FBQyxTQUFELEVBQVksTUFBWixFQUFvQkQsUUFBcEIsQ0FBNkJYLGNBQTdCLENBTk07QUFPdEJhLElBQUFBLG9CQUFvQixFQUFFO0FBQ2xCQyxNQUFBQSxNQUFNLEVBQUU7QUFDSkMsUUFBQUEsWUFBWSxFQUFFLFFBRFY7QUFFSkMsUUFBQUEsY0FBYyxFQUFFO0FBRlosT0FEVTtBQUtsQkMsTUFBQUEsT0FBTyxFQUFFO0FBQ0xGLFFBQUFBLFlBQVksRUFBRSxRQURUO0FBRUxDLFFBQUFBLGNBQWMsRUFBRTtBQUZYO0FBTFMsS0FQQTtBQXFCdEJFLElBQUFBLE9BQU8sRUFBRSxDQUFDQyxNQUFELEVBQWlCO0FBQWtCQyxNQUFBQTtBQUFsQixLQUFqQixLQUFnRTtBQUdyRUQsTUFBQUEsTUFBTSxDQUFDWixNQUFQLENBQWNjLEtBQWQsQ0FBb0JDLElBQXBCLENBQXlCO0FBQ3JCQyxRQUFBQSxJQUFJLEVBQUUsUUFEZTtBQUVyQkMsUUFBQUEsR0FBRyxFQUFFLENBQ0RKLGNBQWMsQ0FBQ0ssS0FEZCxFQUVEO0FBQ0lDLFVBQUFBLE1BQU0sRUFBRUMsaUJBQWlCRCxNQUQ3QjtBQUVJRSxVQUFBQSxPQUFPLEVBQUU7QUFDTEMsWUFBQUEsSUFBSSxFQUFFO0FBREQ7QUFGYixTQUZDO0FBRmdCLE9BQXpCO0FBZ0JBVixNQUFBQSxNQUFNLENBQUNXLE9BQVAsQ0FBZUMsS0FBZixHQUF1QkMsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQmQsTUFBTSxDQUFDVyxPQUFQLENBQWVDLEtBQWpDLEVBQXdDO0FBQzNERyxRQUFBQSxTQUFTLEVBQUUvQixLQUFLLENBQUNDLFFBRDBDO0FBRTNEK0IsUUFBQUEsV0FBVyxFQUFFaEMsS0FBSyxDQUFDRyxVQUZ3QztBQUczREYsUUFBQUEsUUFBUSxFQUFFRCxLQUFLLENBQUNDLFFBSDJDO0FBSTNERSxRQUFBQSxVQUFVLEVBQUVILEtBQUssQ0FBQ0c7QUFKeUMsT0FBeEMsQ0FBdkI7QUFPQSxhQUFPYSxNQUFQO0FBQ0gsS0FoRHFCO0FBbUR0QmlCLElBQUFBLG1CQUFtQixFQUFFLEVBbkRDO0FBd0R0QkMsSUFBQUEsbUJBQW1CLEVBQUU7QUF4REMsR0FBbkIsQ0FBUDtBQTRESCxDQTdERCIsInNvdXJjZXNDb250ZW50IjpbIi8qIEBmbG93ICovXG5cbmltcG9ydCB3aXRoQnVuZGxlQW5hbHl6ZXIgZnJvbSAnQHplaXQvbmV4dC1idW5kbGUtYW5hbHl6ZXInXG5pbXBvcnQgc3R5bGVkSnN4V2VicGFjayBmcm9tICdzdHlsZWQtanN4L3dlYnBhY2snXG4vLyBmbG93LWRpc2FibGUtbGluZVxuaW1wb3J0IHsgcG9wdWxhdGVFbnYgfSBmcm9tICcuL3NyYy9kZXYtdXRpbHMnXG5cbnBvcHVsYXRlRW52KCk7XG5cbmNvbnN0IHtcbiAgICBCVU5ETEVfQU5BTFlaRVxufSA9IHByb2Nlc3MuZW52O1xuXG5jb25zdCBwYXRocyA9IHtcbiAgICB1bml2ZXJzZTogYCR7X19kaXJuYW1lfS9zcmMvYCxcbiAgICBjb21wb25lbnRzOiBgJHtfX2Rpcm5hbWV9L3NyYy9jb21wb25lbnRzL2AsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICgvKiBwaGFzZTogc3RyaW5nLCB7IGRlZmF1bHRDb25maWcgfTogT2JqZWN0ICovKSA9PiB7XG4gICAgcmV0dXJuIHdpdGhCdW5kbGVBbmFseXplcih7XG4gICAgICAgIC8vID8gUmVuYW1lcyB0aGUgYnVpbGQgZGlyIFwiYnVpbGRcIiBpbnN0ZWFkIG9mIFwiLm5leHRcIlxuICAgICAgICBkaXN0RGlyOiAnYnVpbGQnLFxuXG4gICAgICAgIC8vID8gU2VsZWN0aXZlbHkgZW5hYmxlcyBidW5kbGUgYW5hbHlzaXMuIFNlZSBkaXN0LmVudiBvciBSRUFETUUgZm9yIGRldGFpbHNcbiAgICAgICAgYW5hbHl6ZVNlcnZlcjogWydzZXJ2ZXInLCAnYm90aCddLmluY2x1ZGVzKEJVTkRMRV9BTkFMWVpFKSxcbiAgICAgICAgYW5hbHl6ZUJyb3dzZXI6IFsnYnJvd3NlcicsICdib3RoJ10uaW5jbHVkZXMoQlVORExFX0FOQUxZWkUpLFxuICAgICAgICBidW5kbGVBbmFseXplckNvbmZpZzoge1xuICAgICAgICAgICAgc2VydmVyOiB7XG4gICAgICAgICAgICAgICAgYW5hbHl6ZXJNb2RlOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICByZXBvcnRGaWxlbmFtZTogJ2J1bmRsZS1hbmFseXNpcy1zZXJ2ZXIuaHRtbCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBicm93c2VyOiB7XG4gICAgICAgICAgICAgICAgYW5hbHl6ZXJNb2RlOiAnc3RhdGljJyxcbiAgICAgICAgICAgICAgICByZXBvcnRGaWxlbmFtZTogJ2J1bmRsZS1hbmFseXNpcy1jbGllbnQuaHRtbCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyA/IFdlYnBhY2sgY29uZmlndXJhdGlvblxuICAgICAgICAvLyAhIE5vdGUgdGhhdCB0aGUgd2VicGFjayBjb25maWd1cmF0aW9uIGlzIGV4ZWN1dGVkIHR3aWNlOiBvbmNlXG4gICAgICAgIC8vICEgc2VydmVyLXNpZGUgYW5kIG9uY2UgY2xpZW50LXNpZGUhXG4gICAgICAgIHdlYnBhY2s6IChjb25maWc6IE9iamVjdCwgeyAvKiBpc1NlcnZlciwgKi8gZGVmYXVsdExvYWRlcnMgfTogT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICAvLyA/IEFueXRpbWUgd2UgaW1wb3J0IGEgZmlsZSB0aGF0IGVuZHMgaW4gYC5jc3NgLCBydW4gdGhlIHNwZWNpYWxcbiAgICAgICAgICAgIC8vID8gSlNYIGxvYWRlciBzbyB3ZSBjYW4gZG8gY29vbCBjc3MtaW4tanMgc3R1ZmZcbiAgICAgICAgICAgIGNvbmZpZy5tb2R1bGUucnVsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGVzdDogL1xcLmNzcyQvLFxuICAgICAgICAgICAgICAgIHVzZTogW1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0TG9hZGVycy5iYWJlbCxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyOiBzdHlsZWRKc3hXZWJwYWNrLmxvYWRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2NvcGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vID8gVGhlc2UgYXJlIGFsaWFzZXMgdGhhdCBjYW4gYmUgdXNlZCBkdXJpbmcgSlMgaW1wb3J0IGNhbGxzXG4gICAgICAgICAgICAvLyAhIE5vdGUgdGhhdCB5b3UgbXVzdCBhbHNvIGNoYW5nZSB0aGVzZSBzYW1lIGFsaWFzZXMgaW4gLmZsb3djb25maWdcbiAgICAgICAgICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiBwYWNrYWdlLmpzb24gKGplc3QpXG4gICAgICAgICAgICBjb25maWcucmVzb2x2ZS5hbGlhcyA9IE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZy5yZXNvbHZlLmFsaWFzLCB7XG4gICAgICAgICAgICAgICAgdW5pdmVyc2UkOiBwYXRocy51bml2ZXJzZSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzJDogcGF0aHMuY29tcG9uZW50cyxcbiAgICAgICAgICAgICAgICB1bml2ZXJzZTogcGF0aHMudW5pdmVyc2UsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50czogcGF0aHMuY29tcG9uZW50c1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gPyBXaWxsIG9ubHkgYmUgYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIgc2lkZVxuICAgICAgICBzZXJ2ZXJSdW50aW1lQ29uZmlnOiB7XG4gICAgICAgICAgICAvLyAuLi5cbiAgICAgICAgfSxcblxuICAgICAgICAvLyA/IFdpbGwgYmUgYXZhaWxhYmxlIG9uIGJvdGggc2VydmVyIGFuZCBjbGllbnRcbiAgICAgICAgcHVibGljUnVudGltZUNvbmZpZzoge1xuICAgICAgICAgICAgLy8gLi4uXG4gICAgICAgIH1cbiAgICB9KTtcbn07XG4iXX0=