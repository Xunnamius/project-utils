/**
* !!! DO NOT EDIT THIS FILE DIRECTLY !!!
* ! This file has been generated automatically. See the config/*.js version of
* ! this file to make permanent modifications!
*/

"use strict";

require("source-map-support/register");

var _nextBundleAnalyzer = _interopRequireDefault(require("@zeit/next-bundle-analyzer"));

var _webpack = _interopRequireDefault(require("styled-jsx/webpack"));

var _devUtils = require("./src/dev-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _devUtils.populateEnv)();
const {
  BUNDLE_ANALYZE
} = process.env;
const paths = {
  universe: `${__dirname}/src/`,
  components: `${__dirname}/src/components/`
};

module.exports = (phase, {
  defaultConfig
}) => {
  return (0, _nextBundleAnalyzer.default)({
    distDir: 'build',
    analyzeServer: ['server', 'both'].includes(BUNDLE_ANALYZE),
    analyzeBrowser: ['browser', 'both'].includes(BUNDLE_ANALYZE),
    bundleAnalyzerConfig: {
      server: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-server.html'
      },
      browser: {
        analyzerMode: 'static',
        reportFilename: 'bundle-analysis-client.html'
      }
    },
    webpack: (config, {
      isServer,
      defaultLoaders
    }) => {
      config.module.rules.push({
        test: /\.css$/,
        use: [defaultLoaders.babel, {
          loader: _webpack.default.loader,
          options: {
            type: 'scoped'
          }
        }]
      });
      config.resolve.alias = Object.assign({}, config.resolve.alias, {
        universe$: paths.universe,
        components$: paths.components,
        universe: paths.universe,
        components: paths.components
      });
      return config;
    },
    serverRuntimeConfig: {},
    publicRuntimeConfig: {}
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZpZy9uZXh0LmNvbmZpZy5qcyJdLCJuYW1lcyI6WyJCVU5ETEVfQU5BTFlaRSIsInByb2Nlc3MiLCJlbnYiLCJwYXRocyIsInVuaXZlcnNlIiwiX19kaXJuYW1lIiwiY29tcG9uZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJwaGFzZSIsImRlZmF1bHRDb25maWciLCJkaXN0RGlyIiwiYW5hbHl6ZVNlcnZlciIsImluY2x1ZGVzIiwiYW5hbHl6ZUJyb3dzZXIiLCJidW5kbGVBbmFseXplckNvbmZpZyIsInNlcnZlciIsImFuYWx5emVyTW9kZSIsInJlcG9ydEZpbGVuYW1lIiwiYnJvd3NlciIsIndlYnBhY2siLCJjb25maWciLCJpc1NlcnZlciIsImRlZmF1bHRMb2FkZXJzIiwicnVsZXMiLCJwdXNoIiwidGVzdCIsInVzZSIsImJhYmVsIiwibG9hZGVyIiwic3R5bGVkSnN4V2VicGFjayIsIm9wdGlvbnMiLCJ0eXBlIiwicmVzb2x2ZSIsImFsaWFzIiwiT2JqZWN0IiwiYXNzaWduIiwidW5pdmVyc2UkIiwiY29tcG9uZW50cyQiLCJzZXJ2ZXJSdW50aW1lQ29uZmlnIiwicHVibGljUnVudGltZUNvbmZpZyJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBOztBQUNBOztBQUVBOzs7O0FBRUE7QUFFQSxNQUFNO0FBQ0ZBLEVBQUFBO0FBREUsSUFFRkMsT0FBTyxDQUFDQyxHQUZaO0FBSUEsTUFBTUMsS0FBSyxHQUFHO0FBQ1ZDLEVBQUFBLFFBQVEsRUFBRyxHQUFFQyxTQUFVLE9BRGI7QUFFVkMsRUFBQUEsVUFBVSxFQUFHLEdBQUVELFNBQVU7QUFGZixDQUFkOztBQUtBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsQ0FBQ0MsS0FBRCxFQUFnQjtBQUFFQyxFQUFBQTtBQUFGLENBQWhCLEtBQThDO0FBQzNELFNBQU8saUNBQW1CO0FBRXRCQyxJQUFBQSxPQUFPLEVBQUUsT0FGYTtBQUl0QkMsSUFBQUEsYUFBYSxFQUFFLENBQUMsUUFBRCxFQUFXLE1BQVgsRUFBbUJDLFFBQW5CLENBQTRCYixjQUE1QixDQUpPO0FBS3RCYyxJQUFBQSxjQUFjLEVBQUUsQ0FBQyxTQUFELEVBQVksTUFBWixFQUFvQkQsUUFBcEIsQ0FBNkJiLGNBQTdCLENBTE07QUFNdEJlLElBQUFBLG9CQUFvQixFQUFFO0FBQ2xCQyxNQUFBQSxNQUFNLEVBQUU7QUFDSkMsUUFBQUEsWUFBWSxFQUFFLFFBRFY7QUFFSkMsUUFBQUEsY0FBYyxFQUFFO0FBRlosT0FEVTtBQUtsQkMsTUFBQUEsT0FBTyxFQUFFO0FBQ0xGLFFBQUFBLFlBQVksRUFBRSxRQURUO0FBRUxDLFFBQUFBLGNBQWMsRUFBRTtBQUZYO0FBTFMsS0FOQTtBQW9CdEJFLElBQUFBLE9BQU8sRUFBRSxDQUFDQyxNQUFELEVBQWlCO0FBQUVDLE1BQUFBLFFBQUY7QUFBWUMsTUFBQUE7QUFBWixLQUFqQixLQUEwRDtBQUMvREYsTUFBQUEsTUFBTSxDQUFDZCxNQUFQLENBQWNpQixLQUFkLENBQW9CQyxJQUFwQixDQUF5QjtBQUNyQkMsUUFBQUEsSUFBSSxFQUFFLFFBRGU7QUFFckJDLFFBQUFBLEdBQUcsRUFBRSxDQUNESixjQUFjLENBQUNLLEtBRGQsRUFFRDtBQUNJQyxVQUFBQSxNQUFNLEVBQUVDLGlCQUFpQkQsTUFEN0I7QUFFSUUsVUFBQUEsT0FBTyxFQUFFO0FBQ0xDLFlBQUFBLElBQUksRUFBRTtBQUREO0FBRmIsU0FGQztBQUZnQixPQUF6QjtBQWdCQVgsTUFBQUEsTUFBTSxDQUFDWSxPQUFQLENBQWVDLEtBQWYsR0FBdUJDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JmLE1BQU0sQ0FBQ1ksT0FBUCxDQUFlQyxLQUFqQyxFQUF3QztBQUMzREcsUUFBQUEsU0FBUyxFQUFFbEMsS0FBSyxDQUFDQyxRQUQwQztBQUUzRGtDLFFBQUFBLFdBQVcsRUFBRW5DLEtBQUssQ0FBQ0csVUFGd0M7QUFHM0RGLFFBQUFBLFFBQVEsRUFBRUQsS0FBSyxDQUFDQyxRQUgyQztBQUkzREUsUUFBQUEsVUFBVSxFQUFFSCxLQUFLLENBQUNHO0FBSnlDLE9BQXhDLENBQXZCO0FBT0EsYUFBT2UsTUFBUDtBQUNILEtBN0NxQjtBQWdEdEJrQixJQUFBQSxtQkFBbUIsRUFBRSxFQWhEQztBQXFEdEJDLElBQUFBLG1CQUFtQixFQUFFO0FBckRDLEdBQW5CLENBQVA7QUF5REgsQ0ExREQiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgd2l0aEJ1bmRsZUFuYWx5emVyIGZyb20gJ0B6ZWl0L25leHQtYnVuZGxlLWFuYWx5emVyJ1xuaW1wb3J0IHN0eWxlZEpzeFdlYnBhY2sgZnJvbSAnc3R5bGVkLWpzeC93ZWJwYWNrJ1xuLy8gZmxvdy1kaXNhYmxlLWxpbmVcbmltcG9ydCB7IHBvcHVsYXRlRW52IH0gZnJvbSAnLi9zcmMvZGV2LXV0aWxzJ1xuXG5wb3B1bGF0ZUVudigpO1xuXG5jb25zdCB7XG4gICAgQlVORExFX0FOQUxZWkVcbn0gPSBwcm9jZXNzLmVudjtcblxuY29uc3QgcGF0aHMgPSB7XG4gICAgdW5pdmVyc2U6IGAke19fZGlybmFtZX0vc3JjL2AsXG4gICAgY29tcG9uZW50czogYCR7X19kaXJuYW1lfS9zcmMvY29tcG9uZW50cy9gLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSAocGhhc2U6IHN0cmluZywgeyBkZWZhdWx0Q29uZmlnIH06IE9iamVjdCkgPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgcmV0dXJuIHdpdGhCdW5kbGVBbmFseXplcih7XG4gICAgICAgIC8vID8gUmVuYW1lcyB0aGUgYnVpbGQgZGlyIFwiYnVpbGRcIiBpbnN0ZWFkIG9mIFwiLm5leHRcIlxuICAgICAgICBkaXN0RGlyOiAnYnVpbGQnLFxuXG4gICAgICAgIGFuYWx5emVTZXJ2ZXI6IFsnc2VydmVyJywgJ2JvdGgnXS5pbmNsdWRlcyhCVU5ETEVfQU5BTFlaRSksXG4gICAgICAgIGFuYWx5emVCcm93c2VyOiBbJ2Jyb3dzZXInLCAnYm90aCddLmluY2x1ZGVzKEJVTkRMRV9BTkFMWVpFKSxcbiAgICAgICAgYnVuZGxlQW5hbHl6ZXJDb25maWc6IHtcbiAgICAgICAgICAgIHNlcnZlcjoge1xuICAgICAgICAgICAgICAgIGFuYWx5emVyTW9kZTogJ3N0YXRpYycsXG4gICAgICAgICAgICAgICAgcmVwb3J0RmlsZW5hbWU6ICdidW5kbGUtYW5hbHlzaXMtc2VydmVyLmh0bWwnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYnJvd3Nlcjoge1xuICAgICAgICAgICAgICAgIGFuYWx5emVyTW9kZTogJ3N0YXRpYycsXG4gICAgICAgICAgICAgICAgcmVwb3J0RmlsZW5hbWU6ICdidW5kbGUtYW5hbHlzaXMtY2xpZW50Lmh0bWwnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gPyBXZWJwYWNrIGNvbmZpZ3VyYXRpb25cbiAgICAgICAgLy8gISBOb3RlIHRoYXQgdGhlIHdlYnBhY2sgY29uZmlndXJhdGlvbiBpcyBleGVjdXRlZCB0d2ljZTogb25jZVxuICAgICAgICAvLyAhIHNlcnZlci1zaWRlIGFuZCBvbmNlIGNsaWVudC1zaWRlIVxuICAgICAgICB3ZWJwYWNrOiAoY29uZmlnOiBPYmplY3QsIHsgaXNTZXJ2ZXIsIGRlZmF1bHRMb2FkZXJzIH06IE9iamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uZmlnLm1vZHVsZS5ydWxlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0ZXN0OiAvXFwuY3NzJC8sXG4gICAgICAgICAgICAgICAgdXNlOiBbXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRMb2FkZXJzLmJhYmVsLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXI6IHN0eWxlZEpzeFdlYnBhY2subG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzY29wZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gPyBUaGVzZSBhcmUgYWxpYXNlcyB0aGF0IGNhbiBiZSB1c2VkIGR1cmluZyBKUyBpbXBvcnQgY2FsbHNcbiAgICAgICAgICAgIC8vICEgTm90ZSB0aGF0IHlvdSBtdXN0IGFsc28gY2hhbmdlIHRoZXNlIHNhbWUgYWxpYXNlcyBpbiAuZmxvd2NvbmZpZ1xuICAgICAgICAgICAgLy8gISBOb3RlIHRoYXQgeW91IG11c3QgYWxzbyBjaGFuZ2UgdGhlc2Ugc2FtZSBhbGlhc2VzIGluIHBhY2thZ2UuanNvbiAoamVzdClcbiAgICAgICAgICAgIGNvbmZpZy5yZXNvbHZlLmFsaWFzID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLnJlc29sdmUuYWxpYXMsIHtcbiAgICAgICAgICAgICAgICB1bml2ZXJzZSQ6IHBhdGhzLnVuaXZlcnNlLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMkOiBwYXRocy5jb21wb25lbnRzLFxuICAgICAgICAgICAgICAgIHVuaXZlcnNlOiBwYXRocy51bml2ZXJzZSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiBwYXRocy5jb21wb25lbnRzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgICAgfSxcblxuICAgICAgICAvLyA/IFdpbGwgb25seSBiZSBhdmFpbGFibGUgb24gdGhlIHNlcnZlciBzaWRlXG4gICAgICAgIHNlcnZlclJ1bnRpbWVDb25maWc6IHtcbiAgICAgICAgICAgIC8vIC4uLlxuICAgICAgICB9LFxuXG4gICAgICAgIC8vID8gV2lsbCBiZSBhdmFpbGFibGUgb24gYm90aCBzZXJ2ZXIgYW5kIGNsaWVudFxuICAgICAgICBwdWJsaWNSdW50aW1lQ29uZmlnOiB7XG4gICAgICAgICAgICAvLyAuLi5cbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiJdfQ==