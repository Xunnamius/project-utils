/* @flow */

import gulp from 'gulp'
import log from 'fancy-log'
import babel from 'gulp-babel'
import { prependText } from 'gulp-append-prepend'
import rename from 'gulp-rename'

const WARNING_TEXT = [
    '// !!! DO NOT EDIT THIS FILE DIRECTLY !!!',
    '// ! Edit next.config.babel.js and execute `gulp regenerate-next - config',
    '// ! to make any durable changes. The command will wholesale overwrite this file',
    ''
];

const paths = {
    nextConfigCompiled: `${__dirname}/next.config.js`,
    nextConfigRaw: `${__dirname}/next.config.babel.js`,
};

gulp.task('regenerate-nextjs-config', async () => {
    log(`Recompiling ${paths.nextConfigRaw} into ${paths.nextConfigCompiled}...`);
    
    await gulp.src(paths.nextConfigRaw)
              .pipe(babel({
                  envName: 'generate-next-config',
                  babelrc: false
              }))
              .pipe(prependText(WARNING_TEXT))
              .pipe(rename(paths.nextConfigCompiled))
              .pipe(gulp.dest('.'));
});

// More modern task definition syntax (must abide by class naming rules)
// export const example = async () => {
//     await gulp.src(paths.fakepath1) // ...
//     log('Delete the old package.json...');
//     print(await execAsync(`rm ${paths.fakepath2}`));
// };
